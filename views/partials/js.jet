<script src="/static/admin/js/pusher.min.js"></script>
<script>
    let pusher = new Pusher('{{.PreferenceMap["pusher-key"]}}', {
        authEndpoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: "4001",
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disabledTransports: []
    })

    let publicChannel = pusher.subscribe("public-channel");

    //things we want to look for

    // - service goes down
    publicChannel.bind("SCHEDULE_ITEM_REMOVE", function(data){
        attention.toast({
            msg: data.message,
            icon: 'info',
            timer: 30000,
            showCloseButton: true
        })

        let exist = document.getElementById("schedule-" + data.host_service_id)
        if (exist) {
            let row = document.getElementById("schedule-" + data.host_service_id);
            row.parentNode.removeChild(row)

            // check to see if we need to add a "no schedule checks" row
            let currentTable = document.getElementById("schedule-table")
            if (currentTable.rows.length === 1) {
                let newRow = currentTable.tBodies[0].insertRow(-1);
                let newCell = newRow.insertCell(0);
                newCell.setAttribute("colspan", "5")
                newCell.innerHTML = "No Schedule Checks!"
            }
        }
    })
    // - service comes up

    // - service status changed
    publicChannel.bind("HOST_SERVICE_STATUS_CHANGE", function(data){
        attention.toast({
            msg: data.message,
            icon: 'info',
            timer: 30000,
            showCloseButton: true
        })
        //update tables

        //remove existing table row
        let exists = !!document.getElementById("host-service-" + data.host_service_id)
        if (exists) {
            let row = document.getElementById("host-service-" + data.host_service_id)
            row.parentNode.removeChild(row);

            //for host page
            let tableExist = !!document.getElementById(data.oldStatus + "-table")
            if (tableExist) {
                let tableRef = document.getElementById(data.oldStatus + "-table")
                if (tableRef.tBodies[0].childElementCount === 0) {
                    let newRow = tableRef.tBodies[0].insertRow(-1)
                    let newCell = newRow.insertCell(0)
                    newCell.setAttribute("colspan", "3")
                    newCell.innerHTML = "No Service"
                }
            }
            // for single status page
            tableExist = !!document.getElementById(data.oldStatus + "-service-table")
            if (tableExist) {
                let tableRef = document.getElementById(data.oldStatus + "-service-table")
                if (tableRef.tBodies[0].childElementCount === 0) {
                    let newRow = tableRef.tBodies[0].insertRow(-1)
                    let newCell = newRow.insertCell(0)
                    newCell.setAttribute("colspan", "4")
                    newCell.innerHTML = "No Service"
                }
            }
        }

        let tableExists = !!document.getElementById(data.status + "-table");
        if (tableExists) {
            let tableRef = document.getElementById(data.status + "-table");
            tableRef.tBodies[0].deleteRow(0)
            let newRow = tableRef.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "host-service-" + data.host_service_id)
            //first td
            let newCell = newRow.insertCell(0)
            newCell.innerHTML =
                `<span class="${data.icon}"></span>${data.service_name}
                 <span class="badge bg-secondary pointer" onclick="checkNow(${data.host_service_id}, '${data.status}')">Check Now</span>`
            // second td
            newCell = newRow.insertCell(1)
            newCell.innerHTML = `${data.last_check}`
            // third td
            newCell = newRow.insertCell(2)
        }

        tableExists = !!document.getElementById(data.status + "-service-table")
        if (tableExists) {
            let tableRef = document.getElementById(data.status + "-service-table");
            tableRef.tBodies[0].deleteRow(0)
            let newRow = tableRef.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "host-service-" + data.host_service_id)
            //first td
            let newCell = newRow.insertCell(0)
            newCell.innerHTML =  `<a href="/admin/host/${data.host_id}#${data.status}-content">
                                ${data.host_name}
                            </a>`
            // second td
            newCell = newRow.insertCell(1)
            newCell.innerHTML = data.service_name
            // third td
            newCell = newRow.insertCell(2)
            newCell.innerHTML = data.status
            // fourth td
            newCell = newRow.insertCell(3)
        }

        if (!!document.getElementById("healthy_count")) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
        }
    })
    // - schedule changed
    publicChannel.bind("SCHEDULE_CHANGE", function(data){
        let scheduleTableExists = !!document.getElementById("schedule-table")
        if (scheduleTableExists) {
            let scheduleTable = document.getElementById("schedule-table")
            // check to see if the table contains No Scheduled checks
            let tableContent = scheduleTable.innerHTML
            if (tableContent.includes("No Schedule Checks!")) {
                let rowCount = scheduleTable.rows.length
                for (let i = rowCount - 1; i > 0; i--) {
                    scheduleTable.deleteRow(i)
                }
            }

            //delete existing row
            let rowExist = !!document.getElementById("schedule-" + data.host_service_id);
            if (rowExist) {
                let row = document.getElementById("schedule-" + data.host_service_id);
                row.parentNode.removeChild(row);
            }

            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "schedule-" + data.host_service_id)

            let newCell = newRow.insertCell(0)
            let newText = document.createTextNode(data.host);
            newCell.appendChild(newText)

            newCell = newRow.insertCell(1)
            newText = document.createTextNode(data.service);
            newCell.appendChild(newText)

            newCell = newRow.insertCell(2)
            newText = document.createTextNode(data.schedule);
            newCell.appendChild(newText)

            newCell = newRow.insertCell(3)
            newText = document.createTextNode(data.last_run);
            newCell.appendChild(newText)

            newCell = newRow.insertCell(4)
            if (data.next_run === undefined) {
                newText = document.createTextNode("Pending...");
            } else {
                newText = document.createTextNode(data.last_run);
            }
            newCell.appendChild(newText)
        }
    })

    publicChannel.bind("app-starting", function(data){
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = true;
        successAlert(data.message);
    })
    // - monitoring is turned off
    publicChannel.bind("app-stopping", function(data){
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = false;
        warningAlert(data.message);
        let scheduleTableExists = !!document.getElementById("schedule-table")
        if (scheduleTableExists) {
            let scheduleTable = document.getElementById("schedule-table")
            scheduleTable.tBodies[0].innerHTML = ""
            let newRow = scheduleTable.tBodies[0].insertRow(-1)
            let newCell = newRow.insertCell(0)
            newCell.setAttribute("colspan", "5")
            newCell.innerHTML = "No Schedule Checks!"
        }
    })

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function(){
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })
            // add it to map
            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        // show last selected tab, if exists
        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            // there is a hash in the url, so show appropriate tab
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }
    });

    document.getElementById("monitoring-live").addEventListener("change", function(){
        let enabled = document.getElementById("monitoring-live").checked;
        if (!enabled) {
            attention.confirm({
                html: "This will stop monitoring of all hosts and services. Are you sure ?",
                callback: function(result) {
                    if (result) {
                        // want to turn monitoring off
                        updateSystemPref("monitoring_live", "0")
                        toggleMonitoring(false)
                    } else {
                        document.getElementById("monitoring-live").checked = true;
                    }
                }
            })
        } else {
            updateSystemPref("monitoring_live", "1")
            toggleMonitoring(true)
        }
    });

    function updateStatusCount(type, count) {
        document.getElementById(type).innerHTML = count
    }

    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData();
        formData.append("pref_name", prefName)
        formData.append("pref_value", prefValue)
        formData.append("csrf_token", "{{.CSRFToken}}")
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/set-system-pref")
        ajax.send(formData)
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message)
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData();
        formData.append("enabled", enabled)
        formData.append("csrf_token", "{{.CSRFToken}}")
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring")
        ajax.send(formData)
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message)
                }
            }
        }
    }
</script>
